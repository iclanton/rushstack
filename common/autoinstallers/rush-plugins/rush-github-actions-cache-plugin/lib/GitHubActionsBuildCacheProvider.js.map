{"version":3,"file":"GitHubActionsBuildCacheProvider.js","sourceRoot":"","sources":["../src/GitHubActionsBuildCacheProvider.ts"],"names":[],"mappings":";AAAA,4FAA4F;AAC5F,2DAA2D;;;;;;;;;;;;;;;;;;;;;;;;;;AAK3D,uEAAyD;AAGzD,+BAA+B;AAC/B,SAAgB,kBAAkB;IAChC,OAAO,CAAC,CAAC,OAAO,CAAC,GAAG,CAAC,iBAAiB,CAAC;AACzC,CAAC;AAFD,gDAEC;AAED,MAAM,YAAY,GAAY,kBAAkB,EAAE,CAAC;AAEnD,MAAa,+BAA+B;IAC1C,IAAW,mBAAmB;QAC5B,OAAO,YAAY,CAAC;IACtB,CAAC;IAEM,KAAK,CAAC,+BAA+B,CAC1C,QAAmB,EACnB,OAAe;QAEf,IAAI,CAAC,YAAY,EAAE,CAAC;YAClB,OAAO,SAAS,CAAC;QACnB,CAAC;QAED,MAAM,mBAAmB,GAA8B,MAAM,eAAe,CAAC,aAAa,CACxF,CAAC,OAAO,CAAC,EACT,CAAC,OAAO,CAAC,CACV,CAAC;QACF,MAAM,eAAe,GAAuB,mBAAmB,aAAnB,mBAAmB,uBAAnB,mBAAmB,CAAE,eAAe,CAAC;QACjF,IAAI,eAAe,EAAE,CAAC;YACpB,OAAO,MAAM,eAAe,CAAC,qBAAqB,CAAC,eAAe,CAAC,CAAC;QACtE,CAAC;IACH,CAAC;IAEM,KAAK,CAAC,2BAA2B,CACtC,QAAmB,EACnB,OAAe,EACf,WAAmB;;QAEnB,IAAI,CAAC;YACH,MAAM,eAAe,GAAW,WAAW,CAAC,MAAM,CAAC;YACnD,MAAM,oBAAoB,GACxB,MAAM,eAAe,CAAC,YAAY,CAAC,OAAO,EAAE,CAAC,OAAO,CAAC,EAAE;gBACrD,SAAS,EAAE,eAAe;aAC3B,CAAC,CAAC;YAEL,MAAM,UAAU,GAAuB,MAAA,oBAAoB,aAApB,oBAAoB,uBAApB,oBAAoB,CAAE,MAAM,0CAAE,OAAO,CAAC;YAC7E,IAAI,UAAU,EAAE,CAAC;gBACf,MAAM,eAAe,CAAC,eAAe,CAAC,UAAU,EAAE,WAAW,CAAC,CAAC;gBAC/D,OAAO,IAAI,CAAC;YACd,CAAC;iBAAM,IAAI,CAAA,oBAAoB,aAApB,oBAAoB,uBAApB,oBAAoB,CAAE,UAAU,MAAK,GAAG,EAAE,CAAC;gBACpD,MAAM,IAAI,KAAK,CACb,MAAA,MAAA,oBAAoB,aAApB,oBAAoB,uBAApB,oBAAoB,CAAE,KAAK,0CAAE,OAAO,mCAClC,kBAAkB,IAAI,CAAC,KAAK,CAC1B,eAAe,GAAG,CAAC,IAAI,GAAG,IAAI,CAAC,CAChC,QAAQ,eAAe,mDAAmD,CAC9E,CAAC;YACJ,CAAC;iBAAM,CAAC;gBACN,MAAM,IAAI,KAAK,CACb,oCAAoC,OAAO,2DAA2D,MAAA,oBAAoB,aAApB,oBAAoB,uBAApB,oBAAoB,CAAE,KAAK,0CAAE,OAAO,EAAE,CAC7I,CAAC;YACJ,CAAC;QACH,CAAC;QAAC,OAAO,KAAK,EAAE,CAAC;YACf,QAAQ,CAAC,cAAc,CAAC,yBAAyB,KAAK,EAAE,CAAC,CAAC;YAC1D,OAAO,KAAK,CAAC;QACf,CAAC;IACH,CAAC;IAEM,KAAK,CAAC,2BAA2B,CAAC,QAAmB,EAAE,UAAkB;QAC9E,MAAM,IAAI,KAAK,CAAC,iFAAiF,CAAC,CAAC;IACrG,CAAC;IAEM,KAAK,CAAC,sCAAsC,CAAC,QAAmB;QACrE,MAAM,IAAI,KAAK,CAAC,iFAAiF,CAAC,CAAC;IACrG,CAAC;IAEM,KAAK,CAAC,4BAA4B,CAAC,QAAmB;QAC3D,MAAM,IAAI,KAAK,CAAC,iFAAiF,CAAC,CAAC;IACrG,CAAC;CACF;AApED,0EAoEC","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\n// See LICENSE in the project root for license information.\n\nimport type { ITerminal } from '@rushstack/terminal';\nimport type { ICloudBuildCacheProvider } from '@rushstack/rush-sdk';\n\nimport * as cacheHttpClient from './ref/cacheHttpClient';\nimport type { ArtifactCacheEntry, ITypedResponseWithError, ReserveCacheResponse } from './ref/contracts';\n\n// Get this from @actions/cache\nexport function isFeatureAvailable(): boolean {\n  return !!process.env.ACTIONS_CACHE_URL;\n}\n\nconst IS_SUPPORTED: boolean = isFeatureAvailable();\n\nexport class GitHubActionsBuildCacheProvider implements ICloudBuildCacheProvider {\n  public get isCacheWriteAllowed(): boolean {\n    return IS_SUPPORTED;\n  }\n\n  public async tryGetCacheEntryBufferByIdAsync(\n    terminal: ITerminal,\n    cacheId: string\n  ): Promise<Buffer | undefined> {\n    if (!IS_SUPPORTED) {\n      return undefined;\n    }\n\n    const getCacheEntryResult: ArtifactCacheEntry | null = await cacheHttpClient.getCacheEntry(\n      [cacheId],\n      [cacheId]\n    );\n    const archiveLocation: string | undefined = getCacheEntryResult?.archiveLocation;\n    if (archiveLocation) {\n      return await cacheHttpClient.downloadCacheToBuffer(archiveLocation);\n    }\n  }\n\n  public async trySetCacheEntryBufferAsync(\n    terminal: ITerminal,\n    cacheId: string,\n    entryBuffer: Buffer\n  ): Promise<boolean> {\n    try {\n      const archiveFileSize: number = entryBuffer.length;\n      const reserveCacheResponse: ITypedResponseWithError<ReserveCacheResponse> =\n        await cacheHttpClient.reserveCache(cacheId, [cacheId], {\n          cacheSize: archiveFileSize\n        });\n\n      const newCacheId: number | undefined = reserveCacheResponse?.result?.cacheId;\n      if (newCacheId) {\n        await cacheHttpClient.saveCacheBuffer(newCacheId, entryBuffer);\n        return true;\n      } else if (reserveCacheResponse?.statusCode === 400) {\n        throw new Error(\n          reserveCacheResponse?.error?.message ??\n            `Cache size of ~${Math.round(\n              archiveFileSize / (1024 * 1024)\n            )} MB (${archiveFileSize} B) is over the data cap limit, not saving cache.`\n        );\n      } else {\n        throw new Error(\n          `Unable to reserve cache with key ${cacheId}, another job may be creating this cache. More details: ${reserveCacheResponse?.error?.message}`\n        );\n      }\n    } catch (error) {\n      terminal.writeErrorLine(`Failed to save cache: ${error}`);\n      return false;\n    }\n  }\n\n  public async updateCachedCredentialAsync(terminal: ITerminal, credential: string): Promise<void> {\n    throw new Error('Updating cache credentials is not supported by the GitHub Actions cache plugin.');\n  }\n\n  public async updateCachedCredentialInteractiveAsync(terminal: ITerminal): Promise<void> {\n    throw new Error('Updating cache credentials is not supported by the GitHub Actions cache plugin.');\n  }\n\n  public async deleteCachedCredentialsAsync(terminal: ITerminal): Promise<void> {\n    throw new Error('Deleting cache credentials is not supported by the GitHub Actions cache plugin.');\n  }\n}\n"]}