{"version":3,"file":"requestUtils.js","sourceRoot":"","sources":["../../src/ref/requestUtils.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,oBAAoB;AACpB,oDAAqC;AACrC,sDAI6B;AAC7B,2CAAmE;AAGnE,SAAgB,mBAAmB,CAAC,UAAmB;IACrD,IAAI,CAAC,UAAU,EAAE,CAAC;QAChB,OAAO,KAAK,CAAA;IACd,CAAC;IACD,OAAO,UAAU,IAAI,GAAG,IAAI,UAAU,GAAG,GAAG,CAAA;AAC9C,CAAC;AALD,kDAKC;AAED,SAAgB,uBAAuB,CAAC,UAAmB;IACzD,IAAI,CAAC,UAAU,EAAE,CAAC;QAChB,OAAO,IAAI,CAAA;IACb,CAAC;IACD,OAAO,UAAU,IAAI,GAAG,CAAA;AAC1B,CAAC;AALD,0DAKC;AAED,SAAgB,qBAAqB,CAAC,UAAmB;IACvD,IAAI,CAAC,UAAU,EAAE,CAAC;QAChB,OAAO,KAAK,CAAA;IACd,CAAC;IACD,MAAM,oBAAoB,GAAG;QAC3B,uBAAS,CAAC,UAAU;QACpB,uBAAS,CAAC,kBAAkB;QAC5B,uBAAS,CAAC,cAAc;KACzB,CAAA;IACD,OAAO,oBAAoB,CAAC,QAAQ,CAAC,UAAU,CAAC,CAAA;AAClD,CAAC;AAVD,sDAUC;AAED,KAAK,UAAU,KAAK,CAAC,YAAoB;IACvC,OAAO,IAAI,OAAO,CAAC,OAAO,CAAC,EAAE,CAAC,UAAU,CAAC,OAAO,EAAE,YAAY,CAAC,CAAC,CAAA;AAClE,CAAC;AAEM,KAAK,UAAU,KAAK,CACzB,IAAY,EACZ,MAAwB,EACxB,aAA8C,EAC9C,WAAW,GAAG,gCAAoB,EAClC,KAAK,GAAG,6BAAiB,EACzB,UAAwD,SAAS;IAEjE,IAAI,YAAY,GAAG,EAAE,CAAA;IACrB,IAAI,OAAO,GAAG,CAAC,CAAA;IAEf,OAAO,OAAO,IAAI,WAAW,EAAE,CAAC;QAC9B,IAAI,QAAQ,GAAkB,SAAS,CAAA;QACvC,IAAI,UAAU,GAAuB,SAAS,CAAA;QAC9C,IAAI,WAAW,GAAG,KAAK,CAAA;QAEvB,IAAI,CAAC;YACH,QAAQ,GAAG,MAAM,MAAM,EAAE,CAAA;QAC3B,CAAC;QAAC,OAAO,KAAK,EAAE,CAAC;YACf,IAAI,OAAO,EAAE,CAAC;gBACZ,QAAQ,GAAG,OAAO,CAAC,KAAK,CAAC,CAAA;YAC3B,CAAC;YAED,WAAW,GAAG,IAAI,CAAA;YAClB,YAAY,GAAG,KAAK,CAAC,OAAO,CAAA;QAC9B,CAAC;QAED,IAAI,QAAQ,EAAE,CAAC;YACb,UAAU,GAAG,aAAa,CAAC,QAAQ,CAAC,CAAA;YAEpC,IAAI,CAAC,uBAAuB,CAAC,UAAU,CAAC,EAAE,CAAC;gBACzC,OAAO,QAAQ,CAAA;YACjB,CAAC;QACH,CAAC;QAED,IAAI,UAAU,EAAE,CAAC;YACf,WAAW,GAAG,qBAAqB,CAAC,UAAU,CAAC,CAAA;YAC/C,YAAY,GAAG,gCAAgC,UAAU,EAAE,CAAA;QAC7D,CAAC;QAED,IAAI,CAAC,KAAK,CACR,GAAG,IAAI,cAAc,OAAO,OAAO,WAAW,uBAAuB,YAAY,EAAE,CACpF,CAAA;QAED,IAAI,CAAC,WAAW,EAAE,CAAC;YACjB,IAAI,CAAC,KAAK,CAAC,GAAG,IAAI,2BAA2B,CAAC,CAAA;YAC9C,MAAK;QACP,CAAC;QAED,MAAM,KAAK,CAAC,KAAK,CAAC,CAAA;QAClB,OAAO,EAAE,CAAA;IACX,CAAC;IAED,MAAM,KAAK,CAAC,GAAG,IAAI,YAAY,YAAY,EAAE,CAAC,CAAA;AAChD,CAAC;AAtDD,sBAsDC;AAEM,KAAK,UAAU,kBAAkB,CACtC,IAAY,EACZ,MAAiD,EACjD,WAAW,GAAG,gCAAoB,EAClC,KAAK,GAAG,6BAAiB;IAEzB,OAAO,MAAM,KAAK,CAChB,IAAI,EACJ,MAAM,EACN,CAAC,QAAoC,EAAE,EAAE,CAAC,QAAQ,CAAC,UAAU,EAC7D,WAAW,EACX,KAAK;IACL,8EAA8E;IAC9E,iEAAiE;IACjE,CAAC,KAAY,EAAE,EAAE;QACf,IAAI,KAAK,YAAY,6BAAe,EAAE,CAAC;YACrC,OAAO;gBACL,UAAU,EAAE,KAAK,CAAC,UAAU;gBAC5B,MAAM,EAAE,IAAI;gBACZ,OAAO,EAAE,EAAE;gBACX,KAAK;aACN,CAAA;QACH,CAAC;aAAM,CAAC;YACN,OAAO,SAAS,CAAA;QAClB,CAAC;IACH,CAAC,CACF,CAAA;AACH,CAAC;AA3BD,gDA2BC;AAEM,KAAK,UAAU,uBAAuB,CAC3C,IAAY,EACZ,MAAyC,EACzC,WAAW,GAAG,gCAAoB,EAClC,KAAK,GAAG,6BAAiB;IAEzB,OAAO,MAAM,KAAK,CAChB,IAAI,EACJ,MAAM,EACN,CAAC,QAA4B,EAAE,EAAE,CAAC,QAAQ,CAAC,OAAO,CAAC,UAAU,EAC7D,WAAW,EACX,KAAK,CACN,CAAA;AACH,CAAC;AAbD,0DAaC","sourcesContent":["/* eslint-disable */\nimport * as core from '@actions/core'\nimport {\n  HttpCodes,\n  HttpClientError,\n  HttpClientResponse\n} from '@actions/http-client'\nimport {DefaultRetryDelay, DefaultRetryAttempts} from './constants'\nimport {ITypedResponseWithError} from './contracts'\n\nexport function isSuccessStatusCode(statusCode?: number): boolean {\n  if (!statusCode) {\n    return false\n  }\n  return statusCode >= 200 && statusCode < 300\n}\n\nexport function isServerErrorStatusCode(statusCode?: number): boolean {\n  if (!statusCode) {\n    return true\n  }\n  return statusCode >= 500\n}\n\nexport function isRetryableStatusCode(statusCode?: number): boolean {\n  if (!statusCode) {\n    return false\n  }\n  const retryableStatusCodes = [\n    HttpCodes.BadGateway,\n    HttpCodes.ServiceUnavailable,\n    HttpCodes.GatewayTimeout\n  ]\n  return retryableStatusCodes.includes(statusCode)\n}\n\nasync function sleep(milliseconds: number): Promise<void> {\n  return new Promise(resolve => setTimeout(resolve, milliseconds))\n}\n\nexport async function retry<T>(\n  name: string,\n  method: () => Promise<T>,\n  getStatusCode: (arg0: T) => number | undefined,\n  maxAttempts = DefaultRetryAttempts,\n  delay = DefaultRetryDelay,\n  onError: ((arg0: Error) => T | undefined) | undefined = undefined\n): Promise<T> {\n  let errorMessage = ''\n  let attempt = 1\n\n  while (attempt <= maxAttempts) {\n    let response: T | undefined = undefined\n    let statusCode: number | undefined = undefined\n    let isRetryable = false\n\n    try {\n      response = await method()\n    } catch (error) {\n      if (onError) {\n        response = onError(error)\n      }\n\n      isRetryable = true\n      errorMessage = error.message\n    }\n\n    if (response) {\n      statusCode = getStatusCode(response)\n\n      if (!isServerErrorStatusCode(statusCode)) {\n        return response\n      }\n    }\n\n    if (statusCode) {\n      isRetryable = isRetryableStatusCode(statusCode)\n      errorMessage = `Cache service responded with ${statusCode}`\n    }\n\n    core.debug(\n      `${name} - Attempt ${attempt} of ${maxAttempts} failed with error: ${errorMessage}`\n    )\n\n    if (!isRetryable) {\n      core.debug(`${name} - Error is not retryable`)\n      break\n    }\n\n    await sleep(delay)\n    attempt++\n  }\n\n  throw Error(`${name} failed: ${errorMessage}`)\n}\n\nexport async function retryTypedResponse<T>(\n  name: string,\n  method: () => Promise<ITypedResponseWithError<T>>,\n  maxAttempts = DefaultRetryAttempts,\n  delay = DefaultRetryDelay\n): Promise<ITypedResponseWithError<T>> {\n  return await retry(\n    name,\n    method,\n    (response: ITypedResponseWithError<T>) => response.statusCode,\n    maxAttempts,\n    delay,\n    // If the error object contains the statusCode property, extract it and return\n    // an TypedResponse<T> so it can be processed by the retry logic.\n    (error: Error) => {\n      if (error instanceof HttpClientError) {\n        return {\n          statusCode: error.statusCode,\n          result: null,\n          headers: {},\n          error\n        }\n      } else {\n        return undefined\n      }\n    }\n  )\n}\n\nexport async function retryHttpClientResponse(\n  name: string,\n  method: () => Promise<HttpClientResponse>,\n  maxAttempts = DefaultRetryAttempts,\n  delay = DefaultRetryDelay\n): Promise<HttpClientResponse> {\n  return await retry(\n    name,\n    method,\n    (response: HttpClientResponse) => response.message.statusCode,\n    maxAttempts,\n    delay\n  )\n}\n"]}