{"version":3,"file":"options.js","sourceRoot":"","sources":["../../src/ref/options.ts"],"names":[],"mappings":"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","sourcesContent":["/* eslint-disable */\nimport * as core from '@actions/core'\n\n/**\n * Options to control cache upload\n */\nexport interface UploadOptions {\n  /**\n   * Number of parallel cache upload\n   *\n   * @default 4\n   */\n  uploadConcurrency?: number\n  /**\n   * Maximum chunk size in bytes for cache upload\n   *\n   * @default 32MB\n   */\n  uploadChunkSize?: number\n}\n\n/**\n * Options to control cache download\n */\nexport interface DownloadOptions {\n  /**\n   * Indicates whether to use the Azure Blob SDK to download caches\n   * that are stored on Azure Blob Storage to improve reliability and\n   * performance\n   *\n   * @default true\n   */\n  useAzureSdk?: boolean\n\n  /**\n   * Number of parallel downloads (this option only applies when using\n   * the Azure SDK)\n   *\n   * @default 8\n   */\n  downloadConcurrency?: number\n\n  /**\n   * Indicates whether to use Actions HttpClient with concurrency\n   * for Azure Blob Storage\n   */\n  concurrentBlobDownloads?: boolean\n\n  /**\n   * Maximum time for each download request, in milliseconds (this\n   * option only applies when using the Azure SDK)\n   *\n   * @default 30000\n   */\n  timeoutInMs?: number\n\n  /**\n   * Time after which a segment download should be aborted if stuck\n   *\n   * @default 3600000\n   */\n  segmentTimeoutInMs?: number\n\n  /**\n   * Weather to skip downloading the cache entry.\n   * If lookupOnly is set to true, the restore function will only check if\n   * a matching cache entry exists and return the cache key if it does.\n   *\n   * @default false\n   */\n  lookupOnly?: boolean\n}\n\n/**\n * Returns a copy of the upload options with defaults filled in.\n *\n * @param copy the original upload options\n */\nexport function getUploadOptions(copy?: UploadOptions): UploadOptions {\n  const result: UploadOptions = {\n    uploadConcurrency: 4,\n    uploadChunkSize: 32 * 1024 * 1024\n  }\n\n  if (copy) {\n    if (typeof copy.uploadConcurrency === 'number') {\n      result.uploadConcurrency = copy.uploadConcurrency\n    }\n\n    if (typeof copy.uploadChunkSize === 'number') {\n      result.uploadChunkSize = copy.uploadChunkSize\n    }\n  }\n\n  core.debug(`Upload concurrency: ${result.uploadConcurrency}`)\n  core.debug(`Upload chunk size: ${result.uploadChunkSize}`)\n\n  return result\n}\n\n/**\n * Returns a copy of the download options with defaults filled in.\n *\n * @param copy the original download options\n */\nexport function getDownloadOptions(copy?: DownloadOptions): DownloadOptions {\n  const result: DownloadOptions = {\n    useAzureSdk: false,\n    concurrentBlobDownloads: true,\n    downloadConcurrency: 8,\n    timeoutInMs: 30000,\n    segmentTimeoutInMs: 600000,\n    lookupOnly: false\n  }\n\n  if (copy) {\n    if (typeof copy.useAzureSdk === 'boolean') {\n      result.useAzureSdk = copy.useAzureSdk\n    }\n\n    if (typeof copy.concurrentBlobDownloads === 'boolean') {\n      result.concurrentBlobDownloads = copy.concurrentBlobDownloads\n    }\n\n    if (typeof copy.downloadConcurrency === 'number') {\n      result.downloadConcurrency = copy.downloadConcurrency\n    }\n\n    if (typeof copy.timeoutInMs === 'number') {\n      result.timeoutInMs = copy.timeoutInMs\n    }\n\n    if (typeof copy.segmentTimeoutInMs === 'number') {\n      result.segmentTimeoutInMs = copy.segmentTimeoutInMs\n    }\n\n    if (typeof copy.lookupOnly === 'boolean') {\n      result.lookupOnly = copy.lookupOnly\n    }\n  }\n  const segmentDownloadTimeoutMins =\n    process.env['SEGMENT_DOWNLOAD_TIMEOUT_MINS']\n\n  if (\n    segmentDownloadTimeoutMins &&\n    !isNaN(Number(segmentDownloadTimeoutMins)) &&\n    isFinite(Number(segmentDownloadTimeoutMins))\n  ) {\n    result.segmentTimeoutInMs = Number(segmentDownloadTimeoutMins) * 60 * 1000\n  }\n  core.debug(`Use Azure SDK: ${result.useAzureSdk}`)\n  core.debug(`Download concurrency: ${result.downloadConcurrency}`)\n  core.debug(`Request timeout (ms): ${result.timeoutInMs}`)\n  core.debug(\n    `Cache segment download timeout mins env var: ${process.env['SEGMENT_DOWNLOAD_TIMEOUT_MINS']}`\n  )\n  core.debug(`Segment download timeout (ms): ${result.segmentTimeoutInMs}`)\n  core.debug(`Lookup only: ${result.lookupOnly}`)\n\n  return result\n}\n"]}